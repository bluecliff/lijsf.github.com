<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Blue Dream</title><link href="http://bluedream.me/" rel="alternate"></link><link href="http://bluedream.me/feeds/Linux.atom.xml" rel="self"></link><id>http://bluedream.me/</id><updated>2013-04-10T09:10:00+08:00</updated><entry><title>守护进程简单分析</title><link href="http://bluedream.me/shou-hu-jin-cheng-jian-dan-fen-xi.html" rel="alternate"></link><updated>2013-04-10T09:10:00+08:00</updated><author><name>lijsf</name></author><id>tag:bluedream.me,2013-04-10:shou-hu-jin-cheng-jian-dan-fen-xi.html</id><summary type="html">&lt;p&gt;守护进程（Daemon）是运行在后台的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。守护进程是一种很有用的进程。Linux的大多数服务就是用守护进程实现的。比如，Internet服务器inetd，Web服务器httpd等。同时，守护进程完成许多系统任务。比如，作业规划进程crond，打印进程lpd等。这些带有d的服务都是守护进程。&lt;/p&gt;
&lt;h2&gt;系统守护进程&lt;/h2&gt;
&lt;p&gt;系统守护进程分为两种，一种时刻等待某个事件发生，另一种则周期性的运行。前者如httpd，后者如crond。另一方面守护进程在实现时有两种，一种是所谓的standalone守护进程，另一种即super daemon。前者是单独执行一个服务，后者则在某个事件发生时，去启动针对的处理程序。可以看到super daemon是一个管理进程，本身并不提供特定的服务。&lt;/p&gt;
&lt;p&gt;Linux系统启动时会自动启动相应的守护进程，使系统正常工作，这些自启动的守护进程主要是由/etc/rc#.d，/etc/init.d这几个目录下的脚本完成的。&lt;/p&gt;
&lt;p&gt;系统首先启动init进程，该进程再根据启动级别（0——6）去执行rc#.d目录下的脚本，而rc#.d下的脚本实际上都是指向init.d目录下脚本的链接。在执行rc#.d目录下的脚本时，会根据脚本的名字来决定执行的次序，而rc#.d下的脚本的名字命名规范是；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;S{number}{name}&lt;/li&gt;
&lt;li&gt;K{number}{name}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中S开始的文件向脚本传递start参数,K开始的文件向脚本传递stop参数,number决定执行的顺序，序号越小则执行越早，并且K开始的脚本先于S开始的脚本。这是因为在从较高的执行级别切换到较低的执行级别时，需要先关掉一部分服务。&lt;/p&gt;
&lt;h2&gt;守护进程编程&lt;/h2&gt;
&lt;p&gt;守护进程最重要的特性是后台运行，其次，守护进程必须与其运行前的环境隔离开来。这些环境包括未关闭的文件描述符，控制终端，会话和进程组，工作目录以及文件创建掩模等。这些环境通常是守护进程从执行它的父进程（特别是shell）中继承下来的。最后，守护进程的启动方式有其特殊之处。它可以在Linux系统启动时从启动脚本/etc/rc.d中启动，可以由作业规划进程crond启动，还可以由用户终端（通常是shell）执行。 
总之，除开这些特殊性以外，守护进程与普通进程基本上没有什么区别。因此，编写守护进程实际上是把一个普通进程按照上述的守护进程的特性改造成为守护进程。&lt;/p&gt;
&lt;h3&gt;守护进程的编程要点&lt;/h3&gt;
&lt;p&gt;不同Unix环境下守护进程的编程规则并不一致。所幸的是守护进程的编程原则其实都一样，区别在于具体的实现细节不同。这个原则就是要满足守护进程的特性。同时，Linux是基于Syetem V的SVR4并遵循Posix标准，实现起来与BSD4相比更方便。编程要点如下； &lt;/p&gt;
&lt;p&gt;(1). 在后台运行。&lt;/p&gt;
&lt;p&gt;为避免挂起控制终端，需将Daemon放入后台执行。方法是在进程中调用fork，然后使父进程终止，让Daemon在子进程中后台执行。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//结束父进程，子进程继续&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(2). 脱离控制终端，登录会话和进程组 &lt;/p&gt;
&lt;p&gt;进程属于一个进程组，进程组号（GID）就是进程组长的进程号（PID）。登录会话可以包含多个进程组。这些进程组共享一个控制终端。这个控制终端通常是创建进程的登录终端。
控制终端，登录会话和进程组通常是从父进程继承下来的。我们的目的就是要摆脱它们，使之不受它们的影响。方法是在第1点的基础上，调用setsid()使进程成为会话组长： &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;setsid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：当进程是会话组长时setsid()调用失败。但第一点已经保证进程不是会话组长。setsid()调用成功后，进程成为新的会话组长和新的进程组长，并与原来的登录会话和进程组脱离。由于会话过程对控制终端的独占性，进程同时与控制终端脱离。 &lt;/p&gt;
&lt;p&gt;(3). 禁止进程重新打开控制终端 &lt;/p&gt;
&lt;p&gt;现在，进程已经成为无终端的会话组长。但它可以重新申请打开一个控制终端。可以通过使进程不再成为会话组长来禁止进程重新打开控制终端： &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//结束第一子进程，第二子进程继续（第二子进程不再是会话组长）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(4). 关闭打开的文件描述符 &lt;/p&gt;
&lt;p&gt;进程从创建它的父进程那里继承了打开的文件描述符。如不关闭，将会浪费系统资源，造成进程所在的文件系统无法卸下以及引起无法预料的错误。按如下方法关闭它们： &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;NOFILE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(5). 改变当前工作目录 &lt;/p&gt;
&lt;p&gt;进程活动时，其工作目录所在的文件系统不能卸下。一般需要将工作目录改变到根目录。对于需要转储核心，写运行日志的进程将工作目录改变到特定目录如/tmpchdir("/") &lt;/p&gt;
&lt;p&gt;(6). 重设文件创建掩模 &lt;/p&gt;
&lt;p&gt;进程从创建它的父进程那里继承了文件创建掩模。它可能修改守护进程所创建的文件的存取位。为防止这一点，将文件创建掩模清除：umask(0); &lt;/p&gt;
&lt;p&gt;(7). 处理SIGCHLD信号 &lt;/p&gt;
&lt;p&gt;处理SIGCHLD信号并不是必须的。但对于某些进程，特别是服务器进程往往在请求到来时生成子进程处理请求。如果父进程不等待子进程结束，子进程将成为僵尸进程（zombie）从而占用系统资源。如果父进程等待子进程结束，将增加父进程的负担，影响服务器进程的并发性能。在Linux下可以简单地将SIGCHLD信号的操作设为SIG_IGN。 &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIGCHLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;SIG_IGN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样，内核在子进程结束时不会产生僵尸进程。这一点与BSD4不同，BSD4下必须显式等待子进程结束才能释放僵尸进程。 &lt;/p&gt;
&lt;p&gt;经过上面的几步处理后，一个进程即满足了守护进程需求，可以长期在后台运行，完成任务。&lt;/p&gt;
&lt;h3&gt;守护进程实例&lt;/h3&gt;
&lt;p&gt;守护进程实例包括两部分：主程序test.c和初始化程序init.c。主程序每隔一分钟向/tmp目录中的日志test.log报告运行状态。初始化程序中的init_daemon函数负责生成守护进程。&lt;/p&gt;
&lt;p&gt;init.c&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;signal.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/param.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;init_daemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//是父进程，结束父进程&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//fork失败，退出&lt;/span&gt;
    &lt;span class="c1"&gt;//是第一子进程，后台继续执行&lt;/span&gt;
    &lt;span class="n"&gt;setsid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//第一子进程成为新的会话组长和进程组长&lt;/span&gt;
    &lt;span class="c1"&gt;//并与控制终端分离&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//是第一子进程，结束第一子进程&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//fork失败，退出&lt;/span&gt;
    &lt;span class="c1"&gt;//是第二子进程，继续&lt;/span&gt;
    &lt;span class="c1"&gt;//第二子进程不再是会话组长&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;NOFILE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//关闭打开的文件描述符&lt;/span&gt;
        &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/tmp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//改变工作目录到/tmp&lt;/span&gt;
    &lt;span class="n"&gt;umask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//重设文件创建掩模&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;test.c&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;time.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;init_daemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//守护进程初始化函数&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;time_t&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;init_daemon&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//初始化为Daemon&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//每隔一分钟向test.log报告运行状态&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//睡眠一分钟&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Im here at %s/n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;asctime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;localtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编译：gcc -g -o test init.c test.c 
执行：./test 
查看进程：ps -ef | grep test&lt;/p&gt;
&lt;h2&gt;daemon函数&lt;/h2&gt;
&lt;p&gt;前文中给出了一个daemon守护进程的实现函数init_daemon()，实际上Linux系统提供了一个函数daemon可以直接完成把进程转为守护进程。函数原型如下：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;daemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nochdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;noclose&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(1)． daemon()函数主要用于希望脱离控制台，以守护进程形式在后台运行的程序。&lt;/p&gt;
&lt;p&gt;(2)． 当nochdir为0时，daemon将更改进程的根目录为root(“/”)。&lt;/p&gt;
&lt;p&gt;(3)． 当noclose为0是，daemon将进程的STDIN, STDOUT, STDERR都重定向到/dev/null。&lt;/p&gt;
&lt;p&gt;使用时，直接把业务逻辑程序放在daemon函数后面即可。如下所示：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//参数根据需求定&lt;/span&gt;
   &lt;span class="cm"&gt;/*  在这里添加你需要在后台做的工作代码  */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="linux应用"></category><category term="Linux系统编程"></category></entry><entry><title>radius协议简介</title><link href="http://bluedream.me/radius%20protocol.html" rel="alternate"></link><updated>2013-03-20T10:20:00+08:00</updated><author><name>lijsf</name></author><id>tag:bluedream.me,2013-03-20:radius protocol.html</id><summary type="html">&lt;h2&gt;radius协议简介&lt;/h2&gt;
&lt;p&gt;radius(Remote Authentication Dial In User Service)协议是一种AAA网络协议，兼顾Authentication, Authorization, and Accounting (AAA)认证，授权，计费功能的网络管理协议。该协议是应用层协议，基础是UDP协议。&lt;/p&gt;
&lt;p&gt;radius是一个CS结构的协议，C端一般是RAS(Remote Access Server)服务器，包括网关，web服务器，认证网关等(一般的服务端，但在radius协议中是客户端。)，这些软硬件设备都具备一个radius clien模块，可以和radius server通信。radius server通常是后台运行在Unix或者windows主机上的一个进程。radius server具备三个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;认证未授权用户&lt;/li&gt;
&lt;li&gt;授权给通过认证的用户访问特定网络服务的权限&lt;/li&gt;
&lt;li&gt;对用户使用的服务进行计费&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;认证和授权过程&lt;/h2&gt;
&lt;p&gt;&lt;img alt="radius数据包的结构" src="./images/radius_access.png" /&gt; &lt;/p&gt;
&lt;p&gt;1.用户向RAS发起认证请求，认证凭证信息传送给RAS。可以使用链路层协议传送凭证信息，也可以使用https形式的web form。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;RAS向radius server 发起一个radius协议的request，请求授权访问特定网络。请求包含用户凭证信息(usename,password等)，也可以包含一些格额外信息，如请求的授权。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;radius根据预定义的认证模式(如PAP, CHAP or EAP)进行用户身份认证。传统认证模式是读本地文件，现代的可以通过标准sql等进行外部认证。认证通过，server可以授予用户特定的访问属性，包括使用时限，使用权限，计费信息等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;radius server返回认证应答，包括三种，每次认证只返回一种：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(1)Access Reject - 用户未通过认证，可能是密码错误，未激活用户等。&lt;/p&gt;
&lt;p&gt;(2):Access Challenge -请求额外的认证信息，如第二个密码，PIN。也可以用在更复杂的情况下，如何用户建立一条绕过
    RAS的安全信道。&lt;/p&gt;
&lt;p&gt;(3):Access Accept - 通过认证，用户被授权特定的网络服务。&lt;/p&gt;
&lt;p&gt;认证通过后，授权属性信息会通过绑定在Access Accept数据包中返回给RAS。可以包含以下信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;分配给认证用户的IP地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;认证用户可以选择的IP地址池。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户的最长连接时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户链接的优先队列或者其他强制信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;L2TP，VLAN，Quality of Service (QoS) parameters等参数信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;计费过程&lt;/h2&gt;
&lt;p&gt;&lt;img alt="radius数据包的结构" src="./images/radius_accounting.png" /&gt; &lt;/p&gt;
&lt;p&gt;认证通过之后，RAS或者NAS允许用户开始数据访问，此时RAS或者NAS会发送Accounting Start (a RADIUS Accounting Request packet containing an Acct-Status-Type attribute with the value "start")请求给radius server，标志用户网络计费开始。该请求包括用户名，用户网络地址，绑定点以及一个会话ID。&lt;/p&gt;
&lt;p&gt;之后，RAS或者NAS会周期性的向radius server发送Interim Update records (a RADIUS Accounting Request packet containing an Acct-Status-Type attribute with the value "interim-update")请求，更新对应的活跃会话的状态。该数据包包含会话持续时间和当前数据使用情况。&lt;/p&gt;
&lt;p&gt;最后，用户断开网络时，RAS或者NAS将发送final Accounting Stop record (a RADIUS Accounting Request packet containing an Acct-Status-Type attribute with the value "stop")请求给radius server，该请求包括用户链接时间，发送的数据量，发送的数据包，断开原因以及其他一些用户链接信息。&lt;/p&gt;
&lt;p&gt;以上几种accounting request packet若发出后server没有应答返回，client端将不停的以一定间隔发送，直到接到应答信息。&lt;/p&gt;
&lt;h2&gt;radius数据包&lt;/h2&gt;
&lt;p&gt;&lt;img alt="radius数据包的结构" src="./images/radius_package.png" /&gt; &lt;/p&gt;
&lt;p&gt;radius的数据包是封装在UDP数据包的数据部分，数据包的格式如图所示，首先是1个字节长的code，代表包的类型，其次是长为1个自己的这个包的ID，接着是两个自己长的包长，包长包括从code开始到属性的所有数据的长度。Authenticator长为16个字节，该域在请求包和相应包中有不同的功能。&lt;/p&gt;
&lt;p&gt;最后一部分是AVPs，传送client发给server的数据，也可以传送server传送给client的数据。每一个AVP都具有类似相同的结构：&lt;/p&gt;
&lt;p&gt;&lt;img alt="radius数据包的结构" src="./images/radius_avp.png" /&gt; &lt;/p&gt;
&lt;p&gt;首先是Type域，一个字节长，表示该属性的类型，其次是长为1个字节的length，标示这个属性的长度，最后是属性值。
一个radius数据包可以包含多个AVP对。Radius协议预定义了63个属性，用户也可以自己定义自己的AVP。&lt;/p&gt;
&lt;h2&gt;Coovachilli中的radius实现&lt;/h2&gt;
&lt;p&gt;coovachilli的1.1.1.1版本中radius的实现文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;radius.h&lt;/li&gt;
&lt;li&gt;radius_chillispot.h&lt;/li&gt;
&lt;li&gt;radius_wispr.h&lt;/li&gt;
&lt;li&gt;radius.c&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本数据类型定义在limits.h文件中。&lt;/p&gt;
&lt;p&gt;radius.h&lt;/p&gt;
&lt;p&gt;该文件是最基本的radius协议的数据结构，函数的声明等。radius packet type宏定义，标示code域，除了协议中定义的标准code，该文件中还定义了额外的自定义了编码为40到48的8个额外code。
属性定义：该文件中用宏定义定义了100多个属性。&lt;/p&gt;
&lt;h2&gt;基本的数据结构包括：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;struct radius_packet_t    radius包定义，这个struct定义了radius包的基本结构。&lt;/li&gt;
&lt;li&gt;struct radius_queue_tradius   包队列元素, 这个struct定义radius包队列的元素。&lt;/li&gt;
&lt;li&gt;struct radius_t   Radius 实例，这个Struct定义radius的实例结构。每一个radius连接都是这样的一个实例。&lt;/li&gt;
&lt;li&gt;struct radiusm_t  radius实例队列数据结构。&lt;/li&gt;
&lt;li&gt;struct radius_attr_t  radius属性AVP结构的数据结构定义。&lt;/li&gt;
&lt;li&gt;radius_vsattr_t   radius自定义属性AVP结构&lt;/li&gt;
&lt;li&gt;int radius_new    创建新radius实例&lt;/li&gt;
&lt;li&gt;int radius_init_q 初始化radius实例队列&lt;/li&gt;
&lt;li&gt;int radius_free   释放一个radius实例&lt;/li&gt;
&lt;li&gt;void radius_set   设置radius的实例&lt;/li&gt;
&lt;li&gt;int radius_set_cb_auth_conf   收到access request的response后的回调函数&lt;/li&gt;
&lt;li&gt;int radius_set_cb_acct_conf   收到account request的response后的回调函数&lt;/li&gt;
&lt;li&gt;int radius_req    发出请求&lt;/li&gt;
&lt;li&gt;int radius_resp   发送相应&lt;/li&gt;
&lt;li&gt;int radius_decaps 处理一个收到的radius包&lt;/li&gt;
&lt;li&gt;int radius_addattr    给一个包增加属性&lt;/li&gt;
&lt;li&gt;int radius_getnextattr    从一个包中取出一个属性&lt;/li&gt;
&lt;li&gt;int radius_pwdecode   解码密码&lt;/li&gt;
&lt;li&gt;int radius_pwencode   编码密码&lt;/li&gt;
&lt;li&gt;int radius_keydecode  解码一个mppe密码&lt;/li&gt;
&lt;li&gt;int radius_keyencode  编码一个mppe密码&lt;/li&gt;
&lt;li&gt;int radius_timeout    处理超时的包的重发&lt;/li&gt;
&lt;li&gt;int radius_timeleft   返回剩余的等待时间，准备重发&lt;/li&gt;
&lt;li&gt;int radius_authresp_authenticator 生成应答包的认证字&lt;/li&gt;
&lt;li&gt;int chilliauth_radius 开始认证一个radius实例&lt;/li&gt;
&lt;/ul&gt;</summary><category term="网络编程"></category></entry><entry><title>linux IO函数的效率(2)</title><link href="http://bluedream.me/linux-iohan-shu-de-xiao-lu-2.html" rel="alternate"></link><updated>2013-03-08T00:00:00+08:00</updated><author><name>lijsf</name></author><id>tag:bluedream.me,2013-03-08:linux-iohan-shu-de-xiao-lu-2.html</id><summary type="html">&lt;h1&gt;Ｃ标准IO库的效率&lt;/h1&gt;
&lt;p&gt;Ｃ标准IO库主要是stdio.h文件中所包含的函数。这些函数封装了系统内核级的调用
提供了一个标准的接口，根据标准接口，各个系统均可实现自己的IO库。所以在不同
系统上，有不同的具体优化策略，最终实现一个最优的IO效率。&lt;/p&gt;
&lt;p&gt;标准IO函数主要的优化策略是采用了缓冲机制。无论是读还是写，都是先读或者写到
一个系统缓冲区，该缓冲区由系统维护。直到缓冲区满或者必要时，才读写到具体的
文件。打开一个文件流，即建立一个和打开文件相对应的缓冲区。缓冲区大小与系统
相关。&lt;/p&gt;
&lt;p&gt;下面是标准IO函数的性能测试。&lt;/p&gt;
&lt;p&gt;从标准输入读100MB的文档，输出到标准输出。首先采用fgets和fputs函数，这两个函数
可以一次读入或者写指定大小的字符数到系统缓冲区。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define MAXLINE 1024&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAXLINE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAXLINE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;EOF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stdout error&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试该函数的执行时间:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;time&lt;/span&gt; ./a.out &amp;lt;in&amp;gt;out
real    0m0.783s
user    0m0.204s
sys     0m0.168s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其次，再用getc和putc实现上面的同样功能，这两个函数只能每一次读写一个字符进入缓冲区。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;getc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;putc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error to put&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样测量该函数的执行时间：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;time&lt;/span&gt; ./a.out &amp;lt;in&amp;gt;out
real    0m2.414s
user    0m1.800s
sys     0m0.200s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对比两个结果，可以看到，系统时间相差不大，这在于系统缓冲区大小是相同的，所以最终的系统
调用级的IO次数是相同的，这个和上一节中的采用最佳块大小时的IO时间是接近的，从侧面反映了
标准C的IO函数采用了优化过的缓冲区大小。&lt;/p&gt;
&lt;p&gt;两个函数执行时间相差比较大的是用户时间和实际时间，这主要是函数调用开销的影响。100MB的文件
一次读写一个字符和一次读写1024个字符，getc的调用次数是fgets的1024倍，这个开销反映在用户时间
的差距上。真实时间差距进一步拉大是因为进程等待的时间，函数调用次数越多，进程等待的可能性必然
也随之增大。&lt;/p&gt;</summary><category term="unix环境高级编程"></category><category term="linux编程"></category></entry><entry><title>linux IO函数的效率(1)</title><link href="http://bluedream.me/linux-iohan-shu-de-xiao-lu-1.html" rel="alternate"></link><updated>2013-03-06T00:00:00+08:00</updated><author><name>lijsf</name></author><id>tag:bluedream.me,2013-03-06:linux-iohan-shu-de-xiao-lu-1.html</id><summary type="html">&lt;p&gt;linux下iso-c实现即GNU的glibc库，IO库主要是头文件stdio.h文件下的一些函数。一般情况下应用到的
IO操作基本就是该库的IO函数的使用。但同时linux内核也提供了IO的系统调用。本文是在阅读Advanced
programming in the UNIX environment这本书时做的笔记，主要是关于ISO-C的IO库和linux系统调用IO的效率对比。&lt;/p&gt;
&lt;h2&gt;linux系统调用的IO&lt;/h2&gt;
&lt;p&gt;linux系统的文件IO大部分情况只需要用到5个函数：open,read,write,lseek和close。其他的还有一些
应用于原子操作以及文件共享等特殊应用的IO函数，如：dup,fcntl,sync,fsync和ioctl等函数。这些函
数都是linux/unix系统提供的系统调用，由内核完成。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;fcntl.h&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="cm"&gt;/* mode_t mode */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;mode_t&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;filedes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;off_t&lt;/span&gt; &lt;span class="nf"&gt;lseek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;filedes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;off_t&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;whence&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;ssize_t&lt;/span&gt; &lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;filedes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;nbytes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;ssize_t&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;filedes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;nbytes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面即几个常用IO函数的原型，顾名思义，也很容易理解其功能。主要有这些需要注意的：对于内核而言，
所有打开的文件都通过文件描述符引用，即一个证书，默认0,1,2分别对应标准输入，标准输出，标准出错。
文件的打开模式有多种，并且是否打开成功于进程有效id,进程的实际id都有关，同时也与文件的stat有关。&lt;/p&gt;
&lt;p&gt;系统调用级的IO函数都是不带缓冲的IO,write和read函数都把数据放在一个buf中写入磁盘，或者从磁盘读进
buf,该buf大小的选取对IO效率有很大的影响。最高效的选取应当是一个文件系统的block的大小，在linux的
ext4文件系统上，该数值是4096，所以理论上将是选取4096会得到一个高效的IO传输。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define BUFFSIZE 8192&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BUFFSIZE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STDIN_FILENO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bsize&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STDOUT_FILENO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;write error&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;read erro&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述程序完成对系统调用read和write效率的测试，实际上是从标准输入复制数据到标准输出。可选
的参数决定每次IO的buf的大小。使用time工具可以获取程序执行的时间。测试的数据in文件是100Ｍ
的一个英文文本文件。&lt;/p&gt;
&lt;p&gt;首先选择buf的大小为1,即每次只读写1个字节。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;lijsf@echolii-PC:chapt3&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt; ./a.out 1 &amp;lt;in&amp;gt;out
real    2m46.823s
user    0m7.768s
sys     2m38.034s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果可以看到，实际用时超过了2分钟，其中系统调用占用了绝大多数时间。&lt;/p&gt;
&lt;p&gt;再选择buf大小为8192：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;lijsf@echolii-PC:chapt3&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt; ./a.out 8192 &amp;lt;in&amp;gt;out
real    0m0.566s
user    0m0.000s
sys     0m0.152s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果显示效率相对于上次的结果要好的多，原因时，此时系统调用的数目是上一次的4096分之一。实际上
由于block大小是4096,每一次系统调用只能读写4096字节，本次实验中虽然名面上每次读写了8192字节，
实际上系统会分两次读写，每次依然读写4096字节。&lt;/p&gt;
&lt;p&gt;最后选择每次读写4096字节，即理论上的最优大小。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;lijsf@echolii-PC:chapt3&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt; ./a.out 4096 &amp;lt;in&amp;gt;out
real    0m0.131s
user    0m0.000s
sys     0m0.128s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对比上述8192的结果，可以看到，系统调用的时间并未有大的变化，但程序执行的实际时间却有更大的优化。
原因是，在选择了8192字节的buf时，系统不能一次读写完整个buf，所以需要花费时间等待系统IO完成的中
断。这会导致系统挂起执行线程，去执行其他的线程。所以程序的系统运行时间并未增加，但实际运行时间却
增加了。&lt;/p&gt;
&lt;p&gt;综上所述，在采用系统IO函数时，需要注意IO的效率，考虑合适的读写缓存buf，从而可以明显的改善程序的
在IO上的运行效率。&lt;/p&gt;</summary><category term="unix环境高级编程"></category><category term="linux编程"></category></entry><entry><title>mplayer字幕诸问题</title><link href="http://bluedream.me/mplayerzi-mu-zhu-wen-ti.html" rel="alternate"></link><updated>2013-03-02T22:23:00+08:00</updated><author><name>lijsf</name></author><id>tag:bluedream.me,2013-03-02:mplayerzi-mu-zhu-wen-ti.html</id><summary type="html">&lt;p&gt;mplayer功能强大，是linux下播放视频，电影的不二选择，但源于其功能太过于强大，
使用起来还是有很大的难度的，但归结到我这样的新手，英语又差的，最棘手的无疑
时字幕的诸多问题。本文记录我在使用mplayer时解决字幕问题的一些方法。&lt;/p&gt;
&lt;h2&gt;字幕下载&lt;/h2&gt;
&lt;p&gt;自己动手下载字幕是最简单的解决方法，但大多数时候由于影片的发布，压缩格式等
的不同，字幕的时序也不一样，这造成下载下来的外挂字幕大多不能和影片同步。&lt;/p&gt;
&lt;p&gt;win下有个splayer（射手播放器）很好用，可以自动跟据影片匹配射手网上的字幕，
并且自动下载加载播放，很实用的功能。splayer虽然开源，但遗憾的是其调用了大
量的windows API，换言之，即不能跨平台。所以在linux下还是得用mplayer系列播
放器。&lt;/p&gt;
&lt;p&gt;借助于脚本语言实现类似于splayer的功能是可行的，这方面，可以考虑的方法很多。
射手虽然没有提供开放的API，但这难不倒程序员，况且我们只是自己下载来看的，
并不做批量下载，所以避开射手的防机器人手段还是可以做到的。有了想法自然时
动手实现。上github搜了一下是否已经有高手实现过了。果然，已经有人实现了这么
一个脚本。这就是mplayer-wraper。作者的github的id是sunbing81，这是其项目主页
地址:http://gosubi.me/adow/mplayerwrapper，有很详细的介绍，照做不难。该项目有
bash和python两个版本，python实现了影片hash和字幕的hash匹配，可以很精准的
查找到字幕，基本不存在字幕时序问题。&lt;/p&gt;
&lt;h2&gt;字幕加载&lt;/h2&gt;
&lt;p&gt;通过mplayer-wraper可以下载到字幕，但mplayer加载字幕依然会出现问题。往往字幕
好好的，加载上去却时乱码。据我的观察，主要有两种乱码，其一是完全的乱码，其
二是字幕变成了下划线。&lt;/p&gt;
&lt;p&gt;前者完全乱码的原因是字幕编码的问题，只需在播放影片时指明字幕的编码，如下：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mplayer -sub sub-file -subcp utf8 film-file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样一般是可以解决问题了，但有时虽不再是乱码，但却成了下划线。这是字体的问
题，mplayer需要指明字幕的字体才能正常显示。具体命令如下：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mplayer -sub sub-file -subcp utf8 -font simhei film-file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;simhei是一种中文linux下的字体，如果没有可以安装，或者使用现有的字体。可以在
/usr/share/fonts目录下找到系统安装的所有字体。&lt;/p&gt;
&lt;h2&gt;简单方法&lt;/h2&gt;
&lt;p&gt;上述方法可以实现目的，但看个电影敲一堆命令的体验肯定不好，有时再折腾半个小
时就更难受了。mplayer是一个成功的软件，自然可以写配置文件，有配置文件，所有
的命令行参数都可以写进去做为默认参数执行。&lt;/p&gt;
&lt;p&gt;如上文所示的命令，只需要在~/.mplayer/config文件里写上两行即可:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;subcp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;font&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;simhei&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如此即可直接用mplayer播放影片了，不需要再加其他参数，当然若遇上其他编码格式
的字幕文件，直接用默认参数肯定会乱码，可以在播放之前把字幕文件编码转为utf8，
或者在命令行里加上指明字幕编码的命令参数。&lt;/p&gt;</summary><category term="linux应用"></category><category term="mplayer"></category></entry><entry><title>ubuntu12.04 64位系统安装校园网客户端inodeClient</title><link href="http://bluedream.me/inodeClient_install.html" rel="alternate"></link><updated>2013-01-12T10:20:00+08:00</updated><author><name>lijsf</name></author><id>tag:bluedream.me,2013-01-12:inodeClient_install.html</id><summary type="html">&lt;h1&gt;主要步骤&lt;/h1&gt;
&lt;p&gt;(1).  下载安装包,解压到相应目录。&lt;/p&gt;
&lt;p&gt;(2).  64位系统，需要先安装32位的运行库：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;apt-get install ia32-libs* getlibs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;若源中找不到getlibs库，可去http://forum.ubuntu.org.cn/viewtopic.php?t=205525下载deb包安装。&lt;/p&gt;
&lt;p&gt;(3).  进入inodeClient目录，修改iNodeCLient根目录下的enablecards.ps。将其中第二行cd /etc/sysconfig/network-scripts
 修改为cd /etc/network,再运行install.sh。注意install.sh的权限。&lt;/p&gt;
&lt;p&gt;(4).  安装后可通过 &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;ps -e|grep A
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;命令查看是否安装成功，结果类似于：1694 ?        00:00:00 AuthenMngServic
表示安装成功。若无该服务进程，则安装不成功。&lt;/p&gt;
&lt;p&gt;(5). 安装后， 若运行不成功，多会提示缺少libtiff.so.3和libjpeg.so.62两个库文件，32位的系统可以直接通过下面的命令建立软链接：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;ln -s /usr/lib/libtiff.so.3 /usr/lib/i386-linux-gnu/libtiff.so.4.x. x
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;libjpeg.so.62也可类似处理。若找不到对应的较新的库的位置，可用命令locate libtiff.so查找其位置。&lt;/p&gt;
&lt;p&gt;(6).  对64位系统，在处理litfiff或者libjpeg库时可能建立软链接后因为库inode不识别64位的libtiff和libjpeg而不能运行。可以去
 微盘下载这两个文件，放到/usr/lib目录下即可。&lt;/p&gt;</summary><category term="ubuntu12.04"></category><category term="inodeClient"></category><category term="linux应用"></category><category term="校园网"></category></entry></feed>